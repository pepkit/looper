# Usage reference

Looper doesn't just run pipelines; it can also check and summarize the progress of your jobs, as well as remove all files created by them.

Each task is controlled by one of the following commands: `run`, `rerun`, `runp` , `table`,`report`, `destroy`, `check`, `clean`, `inspect`, `init`

- `looper run`:  Runs pipelines for each sample, for each pipeline. This will use your `compute` settings to build and submit scripts to your specified compute environment, or run them sequentially on your local computer.

- `looper runp`:  Runs pipelines for each pipeline for project.

- `looper rerun`: Exactly the same as `looper run`, but only runs jobs with a failed flag.

- `looper report`: Summarize your project results in a form of browsable HTML pages.

- `looper table`: This command parses all key-value results reported in the each sample `stats.tsv` and collates them into a large summary matrix, which it saves in the project output directory. This creates such a matrix for each pipeline type run on the project, and a combined master summary table

- `looper check`: Checks the run progress of the current project. This will display a summary of job status; which pipelines are currently running on which samples, which have completed, which have failed, etc.

- `looper destroy`: Deletes all output results for this project.

- `looper inspect`: Display the Project or Sample information

- `looper init`: Initialize a looper dotfile (`.looper.yaml`) in the current directory


Here you can see the command-line usage instructions for the main looper command and for each subcommand:
